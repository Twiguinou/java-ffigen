package fr.kenlek.jpgen.api.dynload;

import java.lang.foreign.MemorySegment;
import java.lang.foreign.SymbolLookup;
import java.lang.invoke.MethodHandle;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Optional;
import java.util.stream.Stream;

/// A transformer interface which is responsible for supplying compatible method handles
/// to proxy classes generated by [the generator][NativeProxies#implement(java.lang.invoke.MethodHandles.Lookup, java.lang.Class, fr.kenlek.jpgen.api.dynload.DowncallDispatcher)].
/// Furthermore this class extends [SymbolLookup], which makes it easier for users to seek function pointers themselves.
public interface DowncallDispatcher extends SymbolLookup
{
    /// An entry for dispatching method handles to compatible methods only.
    record MatchEntry(MethodMatcher matcher, DowncallDispatcher dispatcher) {}

    /// Creates a downcall dispatcher which first seeks a matching specialized dispatcher.
    /// When it comes to symbol lookup, all entries (including the fallback) are merged together for search.
    ///
    /// Entries are each verified in the expected order.
    /// @param fallbackDispatcher The dispatcher to use if none of the provided entries match a given method.
    /// @param entries Specialization entries to check first.
    /// @return A composite dispatcher, as described above.
    static DowncallDispatcher matching(DowncallDispatcher fallbackDispatcher, MatchEntry... entries)
    {
        return new DowncallDispatcher()
        {
            @Override
            public Optional<MemorySegment> find(String name)
            {
                return Stream.concat(Stream.of(this), Arrays.stream(entries).map(MatchEntry::dispatcher))
                    .map(dispatcher -> dispatcher.find(name))
                    .filter(Optional::isPresent)
                    .findFirst()
                    .orElseThrow();
            }

            @Override
            public MethodHandle dispatch(Method method)
            {
                return Arrays.stream(entries)
                    .filter(entry -> entry.matcher().matches(method))
                    .findFirst()
                    .map(MatchEntry::dispatcher)
                    .orElse(fallbackDispatcher)
                    .dispatch(method);
            }
        };
    }

    /// Creates a method handle which implements the given abstract class method.
    /// @param method The method to implement.
    /// @return A compatible method handle, having the same type as the provided one.
    MethodHandle dispatch(Method method);

    /// Creates a new dispatcher which applies a final transformation to method handles.
    /// The symbol lookup part remains unmodified.
    /// @param transformer The function responsible for applying the said transformation.
    /// @return A composite dispatcher with the transformation step applied.
    default DowncallDispatcher compose(DowncallTransformer transformer)
    {
        return new DowncallDispatcher()
        {
            @Override
            public Optional<MemorySegment> find(String name)
            {
                return DowncallDispatcher.this.find(name);
            }

            @Override
            public MethodHandle dispatch(Method method)
            {
                return transformer.transform(method, DowncallDispatcher.this.dispatch(method));
            }
        };
    }
}
